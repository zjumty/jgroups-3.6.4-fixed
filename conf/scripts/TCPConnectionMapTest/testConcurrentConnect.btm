


## Tests A connecting to B and B to A concurrently (A < B)
## Rendezvous both sender threads after creation of conns-stub, then order accept() before return of connect() on A

##     A:                      B:
##    ----                   ----
## connect(B)           | connect(A)
## accept(B)
##                        connect(A) returns
##                        accept(A)
## connect(B) returns



RULE CreateRendezvous
CLASS TCPConnectionMapTest
METHOD setup
AT EXIT
IF TRUE
   DO System.out.println("--> Creating rendezvous");
      createRendezvous("rv", 2, true);
ENDRULE


## Delete the rendezvous when the test is done
RULE DeleteRendezvous
CLASS TCPConnectionMapTest
METHOD destroy()
AT ENTRY
IF TRUE
   DO System.out.println("--> Deleting rendezvous");
      deleteRendezvous("rv", 2);
ENDRULE


## Blocks just before connect(); the conn-stubs have already been added to connections
RULE beforeConnect
CLASS TCPConnectionMap$Mapper
METHOD getConnection
AT INVOKE TCPConnectionMap$TCPConnection.connect
IF TRUE
  DO rendezvous("rv");
ENDRULE


## Same as above, but blocks only on A: this is used to block until accept() has been
## processed on A before the connect() call on A returns
RULE beforeConnectA
CLASS TCPConnectionMap$Mapper
HELPER org.jgroups.tests.helpers.TCPConnectionMapTestHelper
METHOD getConnection
AT INVOKE TCPConnectionMap$TCPConnection.connect
BIND local_addr=$0.this$0.local_addr;
IF isA(local_addr)
  DO rendezvous("rv");
ENDRULE


## Blocks A after accept(); rendezvous with connect()
RULE afterAccept
CLASS TCPConnectionMap$Acceptor
METHOD handleAccept
AT EXIT
IF TRUE
   DO rendezvous("rv");
ENDRULE






