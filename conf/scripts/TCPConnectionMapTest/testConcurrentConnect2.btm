


## Tests A connecting to B and B to A concurrently (A < B)
##     A:                      B:
##    ----                   ----
## connect(B)           | connect(A)
##                        accept(A)
## connect(B) returns
## accept(B)
##                        connect(A) returns


RULE CreateRendezvous
CLASS TCPConnectionMapTest
METHOD setup
AT EXIT
IF TRUE
   DO System.out.println("--> Creating rendezvous");
      createRendezvous("rv", 2, true);
ENDRULE


## Delete the rendezvous when the test is done
RULE DeleteRendezvous
CLASS TCPConnectionMapTest
METHOD destroy()
AT ENTRY
IF TRUE
   DO System.out.println("--> Deleting rendezvous");
      deleteRendezvous("rv", 2);
ENDRULE


## Blocks the 2 sender threads just before connect(), however the conn-stubs have already been added to connections
RULE beforeConnect
CLASS TCPConnectionMap$Mapper
METHOD getConnection
AT INVOKE TCPConnectionMap$TCPConnection.connect
IF TRUE
  DO rendezvous("rv");
ENDRULE





## Blocks A after sending a message to B; A's connection will be closed. Rendezvous with beforeAcceptA
RULE afterSendingToB
CLASS TCPConnectionMapTest$Sender
HELPER org.jgroups.tests.helpers.TCPConnectionMapTestHelper
METHOD run
AT EXIT
BIND dest=$0.dest;
IF !isA(dest)
  DO rendezvous("rv");
ENDRULE


## Delays the sending of the message to B (on A) a bit, so we run into the exception when sending on the closed conn
#RULE delaySending
#CLASS TCPConnectionMap
#HELPER org.jgroups.tests.helpers.TCPConnectionMapTestHelper
#METHOD send
#AFTER INVOKE TCPConnectionMap$Mapper.getConnection
#BIND local_addr=$0.local_addr;
#IF isA(local_addr)
#  DO System.out.println(": DELAYING sending a bit, local=" + local_addr);
#     org.jgroups.util.Util.sleep(1000);
#ENDRULE



## Blocks A before accept(); rendezvous with afterConnectA
RULE beforeAcceptA
CLASS TCPConnectionMap$Acceptor
HELPER org.jgroups.tests.helpers.TCPConnectionMapTestHelper
METHOD handleAccept
AT ENTRY
BIND local_addr=$0.this$0.local_addr;
IF isA(local_addr)
   DO rendezvous("rv");
ENDRULE

