
## Rules to test JIRA https://issues.jboss.org/browse/JGRP-1679


RULE CreateRendezvous
CLASS LockServiceConcurrencyTest
METHOD testConcurrentClientLocks
AT ENTRY
IF TRUE
   DO System.out.println("--> Creating rendezvous rv1 and rv2");
      createRendezvous("rv1", 2, false); ## don't reuse, deleted after rendezvous
      createRendezvous("rv2", 2, false); ## don't reuse, deleted after rendezvous
      createCountDown("count", 1);
ENDRULE


## Rendezvous when the first LOCK-GRANTED response is received; this way it is delayed
RULE ReceiveLockGrantedResponse
CLASS Locking
METHOD handleLockGrantedResponse
AT ENTRY
IF TRUE
  DO System.out.println("LOCK-GRANTED trying to acquire rv1");
     System.out.println("success=" + rendezvous("rv1"));
     System.out.println("LOCK-GRANTED response met at rendezvous rv1");
ENDRULE


RULE tryLock
CLASS Locking$ClientLock
METHOD tryLock(long,TimeUnit)
AT ENTRY
BIND timeout=$1;
IF timeout > 1
   DO System.out.println("tryLock(" + timeout + ") trying to acquire rv1");
      System.out.println("success=" + rendezvous("rv1"));
      System.out.println("tryLock(" + timeout + ") met at rv1");
ENDRULE


RULE lockGranted
CLASS Locking$ClientLock
METHOD handleLockGrantedResponse
AFTER INVOKE Locking$ClientLock.lockGranted
IF TRUE
   DO System.out.println("lockGranted() trying to acquire rv2");
      System.out.println("success=" + rendezvous("rv2"));
      System.out.println("lockGranted() met at rv2");
ENDRULE


RULE acquireTryLock
CLASS Locking$ClientLock
METHOD tryLock(long,TimeUnit)
AT INVOKE Locking$ClientLock.acquireTryLock
BIND timeout=$1;
IF timeout > 1
   DO System.out.println("acquireTryLock(" + timeout +") trying to acquire rv2");
      System.out.println("success=" + rendezvous("rv2"));
      System.out.println("acquireTryLock(" + timeout + ") met at rv2");
ENDRULE


## Drops *second* LOCK-GRANTED response
RULE DropLockGrantedResponse
CLASS Locking
METHOD sendLockResponse
AT ENTRY
BIND type=$1, owner=$2, lock_name=$3, lock_id=$4;
IF countDown("count")
   DO System.out.println("--> dropping second LOCK-GRANTED response: " + type + ", " + owner + ", " + lock_name + ", lock-id=" + lock_id);
      return;
ENDRULE